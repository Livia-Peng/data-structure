
基础概念
    时间复杂度
        O(a)、O(n)、O(logN)...：描述算法的运行时间
    空间复杂度
        O(a)、O(n)、O(n^2)...：描述算法在运行过程中临时占用存储空间大小
栈
    后进先出，使用array实现
    arr.push(...); arr.pop()
    场景：十进制转二进制、有效的括号、函数调用堆栈
队列
    先进先出，保证有序，使用array实现
    arr.push(...); arr.shift()
    场景：食堂排队打饭、JS异步中的任务队列、计算最近请求次数
链表
    元素的存储不连续，用 next 指针连在一起
    数组增删非首尾元素时往往需要移动元素，而链表只需更改next指针的指向
    使用object实现，next属性指向下一对象
        遍历链表：定义指针，每次循环后指向 next 指向的对象
        插入元素：将前一元素的next指向新元素，将新元素的next指向下一元素
        删除元素：将前一元素的next指向需删除元素的下一元素；如只有删除元素，将值更改为下一元素值，再删除下一元素
    场景：反转列表、两数相加、JS原型链、链表指针获取JSON节点值
    原型链
        对象的原型对象 Object.prototype
        原型链通过 __proto__ 属性连接原型对象
            obj.__proto__ = Object.prototype, 
            func.__proto__ = Function.prototype, func.__proto__.__proto__ = Object.prototype
            arr.__proto__ = Array.prototype, arr.__proto__.__proto__ = Object.prototype
        场景
            若 a.__proto__ = b.prototype，则 a instanceof b = true
            若从 A 对象上没有找到属性 x，将沿着原型链查询 x 属性
